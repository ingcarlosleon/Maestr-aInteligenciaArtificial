# -*- coding: utf-8 -*-
"""computeSales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18SRP7TU2TcfXZ8gpV96nmSdVxLWwDoZz
"""

# pylint: disable=invalid-name,missing-final-newline,broad-exception-caught

import json
import sys
import time


def cargar_archivo_json(ruta_archivo):
    """
    Carga un archivo JSON y devuelve su contenido.

    Args:
        ruta_archivo (str): La ruta al archivo JSON que se va a cargar.

    Returns:
        dict/list: El contenido del archivo JSON, que puede ser un diccionario o una lista.

    Raises:
        json.JSONDecodeError: Si el archivo JSON no puede ser decodificado.
        FileNotFoundError: Si el archivo especificado no se encuentra.
        Exception: Para cualquier otro error que ocurra durante la carga del archivo.
    """
    # Carga un archivo JSON y devuelve su contenido.

    try:
        with open(ruta_archivo, 'r', encoding='utf-8') as archivo:
            return json.load(archivo)
    except json.JSONDecodeError as e:
        print(f"Error al decodificar JSON de {ruta_archivo}: {e}")
    except FileNotFoundError as e:
        print(f"Archivo no encontrado: {e}")
    except Exception as e:
        print(f"Ocurrió un error al cargar {ruta_archivo}: {e}")
    return None


def calcular_total_ventas(ventas, catalogo_precios):
    """
    Calcula el total de las ventas basándose en los precios del catálogo.

    Args:
        ventas (list): Una lista de registros de ventas.
        catalogo_precios (dict): Un diccionario con los precios de los productos.

    Returns:
        float: El total de las ventas.
    """
    # Calcula el total de las ventas basándose en los precios del catálogo.

    total = 0
    for venta in ventas:
        producto = venta.get("Product")
        cantidad = venta.get("Quantity", 0)

        if producto in catalogo_precios:
            total += catalogo_precios[producto] * cantidad
        else:
            print(
              f"Advertencia: Producto '{producto}' no encontrado "
              f"en el catálogo de precios."
            )

    return total


def escribir_resultados_en_archivo(nombre_archivo, contenido):
    """
    Escribe el contenido dado en un archivo especificado.

    Esta función intenta abrir el archivo en modo escritura y
    escribir el contenido proporcionado. Si ocurre un error durante
    el proceso, se captura y muestra un mensaje de error.

    Args:
        nombre_archivo (str): El nombre o ruta del archivo en el que se escribirá.
        contenido (str): El contenido que se escribirá en el archivo.
    """
    try:
        with open(nombre_archivo, 'w', encoding='utf-8') as archivo:
            archivo.write(contenido)
    except Exception as e:
        print(f"Error al escribir en {nombre_archivo}: {e}")


def principal(ruta_catalogo_precios, ruta_registro_ventas):
    """
    Función principal que ejecuta el flujo completo del cálculo de ventas.

    Carga los datos desde archivos JSON especificados, calcula el total de ventas
    basado en el catálogo de precios y el registro de ventas, y finalmente
    escribe los resultados en un archivo. Se imprime el total de ventas y el tiempo
    transcurrido en la ejecución.

    Args:
        ruta_catalogo_precios (str): La ruta al archivo JSON del catálogo de precios.
        ruta_registro_ventas (str): La ruta al archivo JSON del registro de ventas.
    """
    # Función que ejecuta el flujo completo del cálculo de ventas.

    tiempo_inicio = time.time()

    catalogo = cargar_archivo_json(ruta_catalogo_precios)
    ventas = cargar_archivo_json(ruta_registro_ventas)

    if catalogo is None or ventas is None:
        print("Error al cargar archivos. Finalizando.")
        return

    catalogo_precios = {producto["title"]: producto["price"] for producto in catalogo}

    total_ventas = calcular_total_ventas(ventas, catalogo_precios)

    resultados = f"Total Ventas: ${total_ventas:.2f}\n"
    tiempo_transcurrido = time.time() - tiempo_inicio
    resultados += f"Tiempo Transcurrido: {tiempo_transcurrido:.2f} segundos"
    print(resultados)
    escribir_resultados_en_archivo("ResultadosVentas.txt", resultados)


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(
          "Uso: python compute_sales.py TC1.ProductList.json "
          "TC1.Sales.json"
        )
    else:
        principal(sys.argv[1], sys.argv[2])

# Final